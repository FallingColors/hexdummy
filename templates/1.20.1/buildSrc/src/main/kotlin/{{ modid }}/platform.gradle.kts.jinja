// A convention plugin that should be applied to all subprojects corresponding to a specific modloader/platform, such as {{ fabric_path }} and {{ forge_path }}.

package {{ modid }}

plugins {
    id("{{ modid }}.minecraft")
    id("{{ modid }}.mod-dependencies")

    id("com.github.johnrengelman.shadow")
    id("me.modmuss50.mod-publish-plugin")
}

// plugin config

abstract class {{ base_classname }}PlatformExtension(private val project: Project) {
    abstract val developmentConfiguration: Property<String>
    abstract val shadowCommonConfiguration: Property<String>

    fun platform(platform: String, vararg extraModLoaders: String) = project.run {
        // "inheritance" (ie. call the minecraft plugin's platform method so consumers don't have to do it)
        val minecraftExtension = extensions.getByType<I{{ base_classname }}MinecraftExtension>()
        minecraftExtension.platform(platform)

        platform.replaceFirstChar(Char::uppercase).also {
            developmentConfiguration.convention("development$it")
            shadowCommonConfiguration.convention("transformProduction$it")
        }

        configurations {
            named(developmentConfiguration.get()) {
                extendsFrom(get("common"))
            }
        }

        dependencies {
            "shadowCommon"(project(":{{ common_path }}", shadowCommonConfiguration.get())) { isTransitive = false }
        }

        publishMods {
            modLoaders.addAll(platform, *extraModLoaders)
            displayName = modLoaders.map { values ->
                val loaders = values.joinToString(", ") { it.replaceFirstChar(Char::uppercase) }
                // CurseForge/Modrinth version display name (eg. "v0.1.0 [Fabric, Quilt]")
                "v${project.version} [$loaders]"
            }
        }
    }
}

val extension = extensions.create<{{ base_classname }}PlatformExtension>("{{ base_classname|lower }}Platform")

// build logic

val curseforgeId: String by project
val modrinthId: String by project

val minecraftVersion = libs.versions.minecraft.get()

val isCI = (System.getenv("CI") ?: "").isNotBlank()
val isDryRun = (System.getenv("DRY_RUN") ?: "").isNotBlank()
val curseforgeToken = System.getenv("CURSEFORGE_TOKEN") ?: ""
val modrinthToken = System.getenv("MODRINTH_TOKEN") ?: ""

architectury {
    platformSetupLoomIde()
}

configurations {
    val common = register("common")
    register("shadowCommon")
    compileClasspath {
        extendsFrom(common)
    }
    runtimeClasspath {
        extendsFrom(common)
    }
}

dependencies {
    "common"(project(":{{ common_path }}", "namedElements")) { isTransitive = false }
}

sourceSets {
    main {
        resources {
            source(project(":{{ common_path }}").sourceSets.main.get().resources)
        }
    }
}

tasks {
    shadowJar {
        exclude("architectury.common.json")
        configurations = listOf(project.configurations["shadowCommon"])
        archiveClassifier = "dev-shadow"
    }

    remapJar {
        dependsOn(shadowJar)
        inputFile = shadowJar.get().archiveFile
        archiveClassifier = null
    }

    jar {
        archiveClassifier = "dev"
    }

    kotlinSourcesJar {
        val commonSources = project(":{{ common_path }}").tasks.kotlinSourcesJar
        dependsOn(commonSources)
        from(commonSources.flatMap { it.archiveFile }.map(::zipTree))
    }
}

components {
    named<AdhocComponentWithVariants>("java") {
        withVariantsFromConfiguration(configurations.shadowRuntimeElements.get()) {
            skip()
        }
    }
}

publishMods {
    dryRun = !isCI || isDryRun

    type = BETA
    changelog = provider { getLatestChangelog() }
    file = tasks.remapJar.flatMap { it.archiveFile }

    curseforge {
        accessToken = curseforgeToken
        projectId = curseforgeId
        minecraftVersions.add(minecraftVersion)
        clientRequired = true
        serverRequired = true
    }

    modrinth {
        accessToken = modrinthToken
        projectId = modrinthId
        minecraftVersions.add(minecraftVersion)
    }
}

const val SECTION_HEADER_PREFIX = "## "

fun getLatestChangelog() = rootProject.file("CHANGELOG.md").useLines { lines ->
    lines.dropWhile { !it.startsWith(SECTION_HEADER_PREFIX) }
        .withIndex()
        .takeWhile { it.index == 0 || !it.value.startsWith(SECTION_HEADER_PREFIX) }
        .joinToString("\n") { it.value }
        .trim()
}
